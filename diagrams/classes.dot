digraph "classes" {
rankdir=BT
charset="utf-8"
"immunity_agent.logger.AgentLogger" [color="black", fontcolor="black", label=<{AgentLogger|_log : Logger<br ALIGN="LEFT"/>|__init__(log: logging.Logger): None<br ALIGN="LEFT"/>critical(msg: str): None<br ALIGN="LEFT"/>debug(msg: str): None<br ALIGN="LEFT"/>error(msg: str): None<br ALIGN="LEFT"/>exception(msg: str): None<br ALIGN="LEFT"/>info(msg: str): None<br ALIGN="LEFT"/>log(level: int, msg: str): None<br ALIGN="LEFT"/>warn(msg: str): None<br ALIGN="LEFT"/>warning(msg: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"immunity_agent.api.client.Client" [color="black", fontcolor="black", label=<{Client|config<br ALIGN="LEFT"/>host<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>upload_context(endpoint: str, project: str, request: str, control_flow: str, response: str): requests.Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"immunity_agent.config.Config" [color="black", fontcolor="black", label=<{Config|data : Dict[str, Any]<br ALIGN="LEFT"/>filename<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>get(key: str, default: Optional[Any]): Any<br ALIGN="LEFT"/>load(): Dict[str, Any]<br ALIGN="LEFT"/>save(): None<br ALIGN="LEFT"/>set(key: str, value: Any): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"immunity_agent.control_flow.control_flow.ControlFlowBuilder" [color="black", fontcolor="black", label=<{ControlFlowBuilder|control_flow : list<br ALIGN="LEFT"/>external_call_detected : bool<br ALIGN="LEFT"/>project_root : str<br ALIGN="LEFT"/>|__init__(project_root: str)<br ALIGN="LEFT"/>serialize(indentation: int): str<br ALIGN="LEFT"/>serialize_error(error_tuple: tuple): dict<br ALIGN="LEFT"/>serialize_locals(local_dict: dict): list<br ALIGN="LEFT"/>trace_calls(frame, event: str, arg): Callable[[FrameType, str, Any], Optional[Callable]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"immunity_agent.request.django_request.DjangoRequest" [color="black", fontcolor="black", label=<{DjangoRequest|<br ALIGN="LEFT"/>|serialize(request: object, indentation: int): str<br ALIGN="LEFT"/>serialize_request_item(request_components_dict: Dict[str, Union[str, Any]]): Dict[str, str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"immunity_agent.response.django_response.DjangoResponse" [color="black", fontcolor="black", label=<{DjangoResponse|<br ALIGN="LEFT"/>|serialize(response: HttpResponse, indentation: int): str<br ALIGN="LEFT"/>serialize_response_item(response_components_dict: Dict[str, Union[str, Any]]): Dict[str, str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"immunity_agent.middlewares.django_middleware.ImmunityDjangoMiddleware" [color="black", fontcolor="black", label=<{ImmunityDjangoMiddleware|api_client<br ALIGN="LEFT"/>control_flow : NoneType<br ALIGN="LEFT"/>get_response<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>|__call__(request: Any): Any<br ALIGN="LEFT"/>__init__(get_response: callable)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"immunity_agent.middlewares.flask_middleware.ImmunityFlaskMiddleware" [color="black", fontcolor="black", label=<{ImmunityFlaskMiddleware|api_client<br ALIGN="LEFT"/>app : object<br ALIGN="LEFT"/>base_path : str<br ALIGN="LEFT"/>control_flow : NoneType<br ALIGN="LEFT"/>headers : List[Tuple[str, str]], NoneType<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>status : NoneType, str<br ALIGN="LEFT"/>|__call__(environ: Dict[str, str], start_response: callable): bytes<br ALIGN="LEFT"/>__init__(app: object, base_path: str)<br ALIGN="LEFT"/>_capture_request(environ: Dict[str, str]): Dict[str, any]<br ALIGN="LEFT"/>_capture_response(status: str, headers: List[Tuple[str, str]], body: bytes): Dict[str, any]<br ALIGN="LEFT"/>_extract_headers(environ: Dict[str, str]): Dict[str, str]<br ALIGN="LEFT"/>_reset_stream(body: bytes): BytesIO<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"immunity_agent.api.client.Client" -> "immunity_agent.middlewares.django_middleware.ImmunityDjangoMiddleware" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="api_client", style="solid"];
"immunity_agent.api.client.Client" -> "immunity_agent.middlewares.flask_middleware.ImmunityFlaskMiddleware" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="api_client", style="solid"];
"immunity_agent.config.Config" -> "immunity_agent.api.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"immunity_agent.control_flow.control_flow.ControlFlowBuilder" -> "immunity_agent.middlewares.django_middleware.ImmunityDjangoMiddleware" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="control_flow", style="solid"];
"immunity_agent.control_flow.control_flow.ControlFlowBuilder" -> "immunity_agent.middlewares.flask_middleware.ImmunityFlaskMiddleware" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="control_flow", style="solid"];
}
